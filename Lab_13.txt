---------------------------------Lab_13--------------------------------------------------
---------------------------------Part_A---------------------------------------------------

1. Create an index on the company field in the stocks collection.
db.Stock.createIndex({company:1})

2. Create a compound index on the sector and sales fields in the stocks collection.
db.Stock.createIndex({sector:1,sales:1})

3. List all the indexes created on the stocks collection.
db.Stock.getIndexes();

4. Drop an existing index on the company field from the stocks collection.
db.Stock.dropIndex("company_1");

5. Use a cursor to retrieve and iterate over documents in the stocks collection, displaying each document.
var cursor=db.Stock.find();while(cursor.hasNext()){printjson(cursor.next());}

6. Limit the number of documents returned by a cursor to the first 3 documents in the stocks collection.
var cursor=db.Stock.find().limit(3);while(cursor.hasNext()){printjson(cursor.next());}

7. Sort the documents returned by a cursor in descending order based on the sales field.
var cursor=db.Stock.find().sort({sales:-1});while(cursor.hasNext()){printjson(cursor.next());}

8. Skip the first 2 documents in the result set and return the next documents using the cursor.
var cursor=db.Stock.find().skip(2);while(cursor.hasNext()){printjson(cursor.next());}


9. Convert the cursor to an array and return all documents from the stocks collection.
var cursorArray=db.Stock.find().toArray();printjson(cursorArray);
		
10. Create a collection named "Companies" with schema validation to ensure that each document must contains a company field (string) and a sector field (string).
db.createCollection("Companies", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["company", "sector"],
            properties: {
                company: {
                    bsonType: "string",
                    description: "must be a string and is required"
                },
                sector: {
                    bsonType: "string",
                    description: "must be a string and is required"
                }
            }
        }
    }
});




------------------------------------------------------Part – B------------------------------------------------------

1. Create a collection named "Scripts" with validation for fields like eps, pe, and roe to ensure that they
are numbers and required/compulsory fields.
db.createCollection("Scripts", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["eps", "pe", "roe"],
            properties: {
                eps: {
                    bsonType: "double",
                    description: "must be a number and is required"
                },
                pe: {
                    bsonType: "double",
                    description: "must be a number and is required"
                },
                roe: {
                    bsonType: "double",
                    description: "must be a number and is required"
                }
            }
        }
    }
});

2. Create a collection named "Products" where each product has an embedded document for
manufacturer details and a multivalued field for categories that stores an array of category names the
product belongs to.
	1. manufacturer details: The manufacturer will be an embedded document with fields like name, country, and establishedYear.
	2. categories: The categories will be an array field that holds multiple values. (i.e. Electronics, Mobile, Smart Devices).
db.createCollection("Products", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["manufacturer", "categories"],
            properties: {
                manufacturer: {
                    bsonType: "object",
                    required: ["name", "country", "establishedYear"],
                    properties: {
                        name: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        country: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        establishedYear: {
                            bsonType: "int",
                            description: "must be an integer and is required"
                        }
                    }
                },
                categories: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    description: "must be an array of strings"
                }
            }
        }
    }
});

------------------------------------------------------Part – C------------------------------------------------------

1. Create a collection named “financial_Reports” that requires revenue (a positive number) but allows optional fields like expenses and netIncome (if provided, they should also be numbers).
db.createCollection("financial_Reports", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["revenue"],
            properties: {
                revenue: {
                    bsonType: "double",
                    minimum: 0,
                    description: "must be a positive number and is required"
                },
                expenses: {
                    bsonType: "double",
                    description: "must be a number if provided"
                },
                netIncome: {
                    bsonType: "double",
                    description: "must be a number if provided"
                }
            }
        }
    }
});

2. Create a collection named "Student" where each student has name and address are embedded document and mobilenumber and emailaddress are multivalued field that stores an array of values.
db.createCollection("Student", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["name", "address", "mobilenumber", "emailaddress"],
            properties: {
                name: {
                    bsonType: "object",
                    required: ["first", "last"],
                    properties: {
                        first: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        last: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        }
                    }
                },
                address: {
                    bsonType: "object",
                    required: ["street", "city", "zipcode"],
                    properties: {
                        street: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        city: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        zipcode: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        }
                    }
                },
                mobilenumber: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    description: "must be an array of strings"
                },
                emailaddress: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    description: "must be an array of strings"
                }
            }
        }
    }
});